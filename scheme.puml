@startuml
title Flusso Dettagliato al Massimo - Vet Clinic Emulator 🧪🐶

start

:Start main.py;

:Import extentions.impslist as impslist;
:Import connections.py (alias C);

:Inizializza generator = 1;

partition "Avvio - Preparazione Ambiente" {
  :ffile.initial_check();
  note right
    Controlla l'integrità del file dati o lo inizializza
  end note

  :ffile.cls();
  note right
    Pulisce lo schermo / ambiente terminale
  end note
}

partition "Generazione Dati Casuali" {
  :num_pets = random.randint(1, 21);
  :C.dynamic_pets(num_pets);

  if (num_pets > len(PL)) then (errore)
    :print("error 3");
  else
    :campione = random.sample(PL, num_pets);
    :animali.extend(campione);
    :Lista.print_List(animali, "pets");
  endif

  :num_owners = random.randint(1, 10);
  :C.dynamic_owners(num_owners);

  if (num_owners > len(OL)) then (errore)
    :print("error 8");
  else
    :campione = random.sample(OL, num_owners);
    :proprietari.extend(campione);
    :Lista.print_List(proprietari, "owners");
  endif
}

repeat
  :generator = random.randint(1, 2);

  if (generator == 1) then ("Pet cycle")
    :ffile.pet_cycle();
    note right
      Esegue una logica legata agli animali registrati
      (interazioni simulate, eventi, aggiornamenti ecc.)
    end note
  else ("Owner cycle")
    :ffile.owner_cycle();
    note right
      Simula azioni, eventi o modifiche da parte dei proprietari
    end note
  endif

  :delay = random.uniform(0.02, 2);
  :time.sleep(delay);

repeat while (True)

@enduml
